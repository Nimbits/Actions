name: 'Shopware Release Action'
on:
  workflow_call:
    inputs:
      repository-name:
        description: 'Repository name'
        required: true
        type: string
    secrets:
      github-token:
        required: true
      MS_TEAMS_WEBHOOK_URI:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # fetch the entire history to make sure we can check tags
  
      - name: Get latest tag
        id: latest_tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        env:
          GITHUB_TOKEN: ${{ inputs.github-token }}
  
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
        shell: bash
  
      - name: Update version in composer.json
        run: |
          jq '.version = "${{ steps.latest_tag.outputs.tag }}"' composer.json > composer.tmp.json
          mv composer.tmp.json composer.json
  
      - name: Install shopware-cli
        run: |
          wget https://github.com/Nimbits/Actions/raw/master/bin/shopware-cli_Linux_x86_64.tar.gz
          tar xzf shopware-cli_Linux_x86_64.tar.gz
          chmod +x shopware-cli
  
      - name: Build & create zip # todo: Improve this step
        run: |
          ./shopware-cli extension zip --git-commit $(git rev-parse HEAD) .
          mkdir ${{ github.event.repository.name }}
          mkdir temp
          [ -f shopware-cli_Linux_x86_64.tar.gz ] && mv shopware-cli_Linux_x86_64.tar.gz temp/
          [ -f shopware-cli ] && mv shopware-cli temp/
          [ -f ${{ github.event.repository.name }}-*.zip ] && mv ${{ github.event.repository.name }}-*.zip temp/  # Changed here
          [ -d completions ] && mv completions temp/
          [ -d .github ] && mv .github temp/
          [ -d Tests ] && mv Tests temp/
          [ -d vendor ] && mv vendor temp/
          [ -f CHANGELOG.md ] && mv CHANGELOG.md temp/
          [ -f README.md  ] && mv README.md temp/
          [ -f .gitignore ] && mv .gitignore temp/
          [ -f phpunit.xml ] && mv phpunit.xml temp/
          find . -maxdepth 1 ! -name ${{ github.event.repository.name }} ! -name temp -exec mv {} ${{ github.event.repository.name }} \;
          zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}  
  
      - name: Get Latest Release
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.github-token }}
          script: |
            const response = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return response.data;

      - name: Check if Asset Already Exists
        id: check_asset
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.github-token }}
          script: |
            const assets = ${{ steps.get_latest_release.outputs.result }}.assets;
            const assetName = '${{ inputs.repository-name }}.zip';
            if (assets.some(asset => asset.name === assetName)) {
              throw new Error('Asset already exists in the latest release.');
            }

      - name: Upload Release Asset
        if: steps.check_asset.outcome == 'success'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_latest_release.outputs.result.upload_url }}
          asset_path: ./${{ inputs.repository-name }}.zip
          asset_name: ${{ inputs.repository-name }}.zip
          asset_content_type: application/zip

      - name: Notify teams on failure
        if: failure()
        uses: jdcargile/ms-teams-notification@v1.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: 'Release failed!'
          notification-color: 'F85149'  # Red 
          timezone: Europe/Berlin
