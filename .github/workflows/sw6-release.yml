name: 'Shopware Release Action'
on:
  workflow_call:
    inputs:
      repository-name:
        description: 'Repository name'
        required: true
        type: string
    secrets:
      github-token:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # fetch the entire history to make sure we can check tags

      - name: Check tag
        id: check
        run: |
          tag=$(git tag --contains ${{ github.sha }})
          should_deploy="false"
          if [[ -z "$tag" ]]; then
            echo "No new tag associated with this commit. Skipping deployment."
          elif [[ "$tag" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            should_deploy="true"
          else
            echo "Tag does not match the format '[0-9]+.[0-9]+.[0-9]+'! Consider removing the tag."
            exit 1
          fi
          echo "should_deploy=$should_deploy" >> $GITHUB_ENV
          echo "should_deploy=$should_deploy" >> $GITHUB_PATH
          echo "should_deploy=$should_deploy" > should_deploy.txt
          echo "Deployment status: $should_deploy"   # Add this for debugging
  
      - name: Get latest tag
        if: env.should_deploy == 'true'
        id: latest_tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        env:
          GITHUB_TOKEN: ${{ inputs.github-token }}
  
      - name: Install jq
        if: env.should_deploy == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
        shell: bash
  
      - name: Update version in composer.json
        if: env.should_deploy == 'true'
        run: |
          jq '.version = "${{ steps.latest_tag.outputs.tag }}"' composer.json > composer.tmp.json
          mv composer.tmp.json composer.json
  
      - name: Install shopware-cli
        if: env.should_deploy == 'true'
        run: |
          wget https://github.com/Nimbits/Actions/raw/master/bin/shopware-cli_Linux_x86_64.tar.gz
          tar xzf shopware-cli_Linux_x86_64.tar.gz
          chmod +x shopware-cli
  
      - name: Build & create zip
        if: env.should_deploy == 'true'
        run: |
          ./shopware-cli extension zip --git-commit $(git rev-parse HEAD) .
          mkdir ${{ inputs.repository-name }}
          mkdir temp
          [ -f shopware-cli_Linux_x86_64.tar.gz ] && mv shopware-cli_Linux_x86_64.tar.gz temp/
          [ -f shopware-cli ] && mv shopware-cli temp/
          [ -f ${{ inputs.repository-name }}-*.zip ] && mv ${{ inputs.repository-name }}-*.zip temp/
          [ -d completions ] && mv completions temp/
          [ -d .github ] && mv .github temp/
          [ -f CHANGELOG.md ] && mv CHANGELOG.md temp/
          [ -f README.md  ] && mv README.md temp/
          [ -f .gitignore ] && mv .gitignore temp/
          find . -maxdepth 1 ! -name ${{ inputs.repository-name }} ! -name temp -exec mv {} ${{ inputs.repository-name }} \;
          zip -r ${{ inputs.repository-name }}.zip ${{ inputs.repository-name }}
  
  
      - name: Create Release
        if: env.should_deploy == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.latest_tag.outputs.tag }}
          release_name: ${{ steps.latest_tag.outputs.tag }}
          draft: false
          prerelease: false
  
      - name: Upload Release Asset
        if: env.should_deploy == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ inputs.repository-name }}.zip
          asset_name: ${{ inputs.repository-name }}.zip
          asset_content_type: application/zip
