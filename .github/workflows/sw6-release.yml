name: 'Build Shopware Shop Zip and attach to Release'
on:
  workflow_call:
    inputs:
      repo_name:
        required: false
        type: 'string'
        default: ${{ github.event.repository.name }}
    secrets:
      CURR_VAULT_PATH:
        required: true
      CURR_VAULT_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # fetch the entire history to make sure we can check tags
  
      - name: Get latest tag
        id: latest_tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        env:
          GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  
          npm-version: '10'  
  
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
        shell: bash
  
      - name: Update version in composer.json
        run: |
          jq '.version = "${{ steps.latest_tag.outputs.tag }}"' composer.json > composer.tmp.json
          mv composer.tmp.json composer.json
  
      - name: Install shopware-cli
        run: |
          wget https://github.com/Nimbits/Actions/raw/master/bin/shopware-cli_Linux_x86_64.tar.gz
          tar xzf shopware-cli_Linux_x86_64.tar.gz
          chmod +x shopware-cli
  
      - name: Build & create zip # todo: Improve this step
        run: |
          ./shopware-cli extension zip --release .
          mkdir ${{ github.event.repository.name }}
          mkdir temp
          [ -f shopware-cli_Linux_x86_64.tar.gz ] && mv shopware-cli_Linux_x86_64.tar.gz temp/
          [ -f shopware-cli ] && mv shopware-cli temp/
          [ -f ${{ github.event.repository.name }}-*.zip ] && mv ${{ github.event.repository.name }}-*.zip temp/  # Changed here
          [ -d completions ] && mv completions temp/
          [ -d .github ] && mv .github temp/
          [ -d Tests ] && mv Tests temp/
          [ -d vendor ] && mv vendor temp/
          [ -f CHANGELOG.md ] && mv CHANGELOG.md temp/
          [ -f README.md  ] && mv README.md temp/
          [ -f .gitignore ] && mv .gitignore temp/
          [ -f phpunit.xml ] && mv phpunit.xml temp/
          find . -maxdepth 1 ! -name ${{ github.event.repository.name }} ! -name temp -exec mv {} ${{ github.event.repository.name }} \;
          zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}  

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.get_latest_release.outputs.upload_url }}
          asset_name: ${{ inputs.repo_name }}.zip
          tag: ${{ github.ref }}
          overwrite: false

    #  - name: Upload Release Asset
     #   uses: actions/upload-release-asset@v1
     #   with:
     #     upload_url: ${{ steps.get_latest_release.outputs.upload_url }}
     #     asset_path: ./${{ inputs.repo_name }}.zip
     #     asset_name: ${{ inputs.repo_name }}.zip
     #     asset_content_type: application/zip

      - name: Fetch secrets from Vault for testing
        id: fetch_secrets
        if: failure()
        uses: hashicorp/vault-action@v2.7.4
        with:
          url: ${{ vars.VAULT_SERVER }}
          method: token
          token: ${{ secrets.CURR_VAULT_TOKEN }}
          secrets: |
            ${{ secrets.CURR_VAULT_PATH }} ms_teams_webhook_uri | MS_TEAMS_WEBHOOK_URI

      - name: Notify teams on failure
        if: failure()
        uses: jdcargile/ms-teams-notification@v1.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ms-teams-webhook-uri: ${{ env.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: 'Release failed!'
          notification-color: 'F85149'  # Red 
          timezone: Europe/Berlin
