name: 'Shopware 6 Plugin Test'
on:
  workflow_call:
    inputs:
      phpstan-level:
        description: 'PHPStan analysis level'
        required: false
        default: '5'
        type: 'string'
      php-version:
        description: 'PHP version for PHPStan'
        required: false
        default: "8.2"
        type: string
      cli-branch:
        description: 'CLI branch to use for configs'
        required: false
        default: 'linters'
        type: string
      notify-users:
        description: 'Comma-separated list of GitHub usernames to notify (e.g. "user1,user2")'
        required: false
        default: ''
        type: string
    secrets:
      CURR_VAULT_PATH:
        required: true
      CURR_VAULT_TOKEN:
        required: true
      DEPENDENCY_TOKEN:
        required: true

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Download linting configs from CLI repo
        run: |
          echo "üì• Downloading linting configurations..."
          mkdir -p .github/lint-configs
          
          # Download package.json from CLI repo
          curl -H "Authorization: token ${{ secrets.DEPENDENCY_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -o .github/lint-configs/package.json \
               "https://api.github.com/repos/Nimbits/cli/contents/package.json?ref=${{ inputs.cli-branch }}"
          
          # Download pnpm-lock.yaml from CLI repo
          curl -H "Authorization: token ${{ secrets.DEPENDENCY_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -o .github/lint-configs/pnpm-lock.yaml \
               "https://api.github.com/repos/Nimbits/cli/contents/pnpm-lock.yaml?ref=${{ inputs.cli-branch }}"
          
          # Download PHPStan config
          curl -H "Authorization: token ${{ secrets.DEPENDENCY_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -o .github/lint-configs/phpstan.neon \
               "https://api.github.com/repos/Nimbits/cli/contents/configs/phpstan.neon?ref=${{ inputs.cli-branch }}"
          
          # Download ESLint config
          curl -H "Authorization: token ${{ secrets.DEPENDENCY_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -o .github/lint-configs/eslint.config.js \
               "https://api.github.com/repos/Nimbits/cli/contents/configs/eslint.config.js?ref=${{ inputs.cli-branch }}"
          
          # Download Stylelint config
          curl -H "Authorization: token ${{ secrets.DEPENDENCY_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -o .github/lint-configs/.stylelintrc.json \
               "https://api.github.com/repos/Nimbits/cli/contents/configs/.stylelintrc.json?ref=${{ inputs.cli-branch }}"
          
          # Download Stylelint ignore file
          curl -H "Authorization: token ${{ secrets.DEPENDENCY_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -o .github/lint-configs/.stylelintignore \
               "https://api.github.com/repos/Nimbits/cli/contents/configs/.stylelintignore?ref=${{ inputs.cli-branch }}"
          
          echo "‚úÖ Downloaded configurations:"
          ls -la .github/lint-configs/

      - name: Determine Base Branch
        id: basebranch
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "branch=$(git ls-remote --heads origin master | grep -q master && echo master || echo main)" >> $GITHUB_ENV
          else
            echo "branch=$(git ls-remote --heads origin master | grep -q master && echo master || (git ls-remote --heads origin main | grep -q main && echo main))" >> $GITHUB_ENV
          fi

      - name: Check composer version
        if: github.event_name != 'release'
        continue-on-error: true
        id: composer-check
        run: |
          git fetch origin ${{ env.branch }}:${{ env.branch }}
          BASE_VERSION=$(jq -r '.version' composer.json -c)
          git checkout ${{ env.branch }}
          CURRENT_VERSION=$(jq -r '.version' composer.json -c)
          git checkout -
          if [ "$GITHUB_REF_NAME" != "${{ env.branch }}" ] && [ "$BASE_VERSION" == "$CURRENT_VERSION" ]; then
            echo "‚ùå Please change the composer version"
            echo "COMPOSER_CHECK_FAILED=true" >> $GITHUB_ENV
            exit 1
          else
            echo "‚úÖ Composer version check passed"
            echo "COMPOSER_CHECK_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Check for README changes
        if: github.event_name != 'release'
        continue-on-error: true
        id: readme-check
        run: |
          git fetch origin ${{ env.branch }}
          if ! git diff --name-only HEAD origin/${{ env.branch }} | grep -q "README"; then
            echo "‚ùå Please add the version to the readme"
            echo "README_CHECK_FAILED=true" >> $GITHUB_ENV
            exit 1
          else
            echo "‚úÖ README check passed"
            echo "README_CHECK_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Configure GitHub token
        run: composer config --global --auth github-oauth.github.com ${{ secrets.DEPENDENCY_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php-version }}

      - name: Install PHP dependencies
        run: composer install

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Node.js linting dependencies from CLI
        run: |
          echo "üì¶ Installing Node.js dependencies from CLI package.json..."
          cd .github/lint-configs
          
          # Show what files we have
          echo "Downloaded files:"
          ls -la
          
          # Show package.json content for verification
          echo "CLI package.json content:"
          cat package.json
          
          # Check if pnpm-lock.yaml was downloaded
          if [ -f "pnpm-lock.yaml" ]; then
            echo "‚úÖ pnpm-lock.yaml found, using frozen lockfile"
            pnpm install --frozen-lockfile
          else
            echo "‚ö†Ô∏è pnpm-lock.yaml not found, installing without frozen lockfile"
            pnpm install --no-frozen-lockfile
          fi
          
          echo "‚úÖ Installed linting dependencies:"
          ls -la node_modules/.bin/ | grep -E "(eslint|stylelint)" || echo "No linting tools found in bin"
          
          cd ../..

      - name: PHPStan
        continue-on-error: true
        id: phpstan
        uses: php-actions/phpstan@v3
        with:
          configuration: .github/lint-configs/phpstan.neon
          version: composer
          path: src/
          level: ${{ inputs.phpstan-level }}
          php_version: ${{ inputs.php-version }}

      - name: Set PHPStan result
        run: |
          if [ "${{ steps.phpstan.outcome }}" = "failure" ]; then
            echo "PHPSTAN_FAILED=true" >> $GITHUB_ENV
          else
            echo "PHPSTAN_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Run ESLint
        continue-on-error: true
        id: eslint
        run: |
          echo "üîç Running ESLint analysis..."
          # Check if JS/Vue files exist
          if find . -name "*.js" -o -name "*.vue" | grep -v node_modules | grep -v vendor | head -1 | read; then
            echo "Found JS/Vue files, running ESLint..."
            # Run ESLint from project root with correct config path
            npx --prefix .github/lint-configs eslint \
              --config=.github/lint-configs/eslint.config.js \
              .
            echo "ESLINT_FAILED=false" >> $GITHUB_ENV
          else
            echo "No JS/Vue files found to lint"
            echo "ESLINT_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Set ESLint result
        if: steps.eslint.outcome == 'failure'
        run: echo "ESLINT_FAILED=true" >> $GITHUB_ENV

      - name: Run Stylelint
        continue-on-error: true
        id: stylelint
        run: |
          echo "üîç Running Stylelint analysis..."
          # Check if CSS/SCSS files exist
          if find . -name "*.css" -o -name "*.scss" -o -name "*.sass" | grep -v node_modules | grep -v vendor | head -1 | read; then
            echo "Found CSS/SCSS files, running Stylelint..."
            # Run Stylelint from project root with correct config path
            npx --prefix .github/lint-configs stylelint \
              --config=.github/lint-configs/.stylelintrc.json \
              --ignore-path=.github/lint-configs/.stylelintignore \
              "**/*.{css,scss,sass}"
            echo "STYLELINT_FAILED=false" >> $GITHUB_ENV
          else
            echo "No CSS/SCSS files found to lint"
            echo "STYLELINT_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Set Stylelint result
        if: steps.stylelint.outcome == 'failure'
        run: echo "STYLELINT_FAILED=true" >> $GITHUB_ENV

      - name: Test Results Summary
        run: |
          echo "## üìã Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          FAILED_TESTS=""
          FAILED_DETAILS=""
          
          # Check each test result
          if [ "${{ env.COMPOSER_CHECK_FAILED }}" = "true" ]; then
            echo "‚ùå **Composer Version Check**: Failed - Please update composer version" >> $GITHUB_STEP_SUMMARY
            FAILED_TESTS="$FAILED_TESTS composer"
            FAILED_DETAILS="$FAILED_DETAILS\n‚Ä¢ Composer Version Check: Please update composer version"
          else
            echo "‚úÖ **Composer Version Check**: Passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ env.README_CHECK_FAILED }}" = "true" ]; then
            echo "‚ùå **README Check**: Failed - Please update README with version info" >> $GITHUB_STEP_SUMMARY
            FAILED_TESTS="$FAILED_TESTS readme"
            FAILED_DETAILS="$FAILED_DETAILS\n‚Ä¢ README Check: Please update README with version info"
          else
            echo "‚úÖ **README Check**: Passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ env.PHPSTAN_FAILED }}" = "true" ]; then
            echo "‚ùå **PHPStan**: Failed - PHP static analysis errors found" >> $GITHUB_STEP_SUMMARY
            FAILED_TESTS="$FAILED_TESTS phpstan"
            FAILED_DETAILS="$FAILED_DETAILS\n‚Ä¢ PHPStan: PHP static analysis errors found"
          else
            echo "‚úÖ **PHPStan**: Passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ env.ESLINT_FAILED }}" = "true" ]; then
            echo "‚ùå **ESLint**: Failed - JavaScript/Vue linting errors found" >> $GITHUB_STEP_SUMMARY
            FAILED_TESTS="$FAILED_TESTS eslint"
            FAILED_DETAILS="$FAILED_DETAILS\n‚Ä¢ ESLint: JavaScript/Vue linting errors found"
          else
            echo "‚úÖ **ESLint**: Passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ env.STYLELINT_FAILED }}" = "true" ]; then
            echo "‚ùå **Stylelint**: Failed - CSS/SCSS linting errors found" >> $GITHUB_STEP_SUMMARY
            FAILED_TESTS="$FAILED_TESTS stylelint"
            FAILED_DETAILS="$FAILED_DETAILS\n‚Ä¢ Stylelint: CSS/SCSS linting errors found"
          else
            echo "‚úÖ **Stylelint**: Passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Save results for Teams notification
          echo "FAILED_TESTS=$FAILED_TESTS" >> $GITHUB_ENV
          echo "FAILED_DETAILS<<EOF" >> $GITHUB_ENV
          echo -e "$FAILED_DETAILS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Final result
          if [ -n "$FAILED_TESTS" ]; then
            echo "üî¥ **Overall Result**: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Failed tests:**$FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "Please fix the above issues and try again." >> $GITHUB_STEP_SUMMARY
            echo "OVERALL_FAILED=true" >> $GITHUB_ENV
          else
            echo "üü¢ **Overall Result**: ALL TESTS PASSED" >> $GITHUB_STEP_SUMMARY
            echo "OVERALL_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Prepare Teams notification message
        if: always()
        run: |
          # Parse user mapping from organization variable
          # Expected format: "github_user1:email1@domain.com,github_user2:email2@domain.com"
          declare -A EMAIL_MAP=()
          
          if [ -n "${{ vars.TEAMS_USER_MAPPING }}" ]; then
            echo "üìß Loading user email mapping from organization variable..."
            IFS=',' read -ra USER_PAIRS <<< "${{ vars.TEAMS_USER_MAPPING }}"
            for pair in "${USER_PAIRS[@]}"; do
              # Split by colon and clean whitespace
              IFS=':' read -ra MAPPING <<< "$pair"
              if [ ${#MAPPING[@]} -eq 2 ]; then
                github_user=$(echo "${MAPPING[0]}" | xargs)
                email=$(echo "${MAPPING[1]}" | xargs)
                EMAIL_MAP["$github_user"]="$email"
                echo "  $github_user -> $email"
              fi
            done
          else
            echo "‚ö†Ô∏è No TEAMS_USER_MAPPING variable found in organization settings"
          fi
          
          # Prepare user mentions
          MENTIONS=""
          if [ -n "${{ inputs.notify-users }}" ]; then
            IFS=',' read -ra USERS <<< "${{ inputs.notify-users }}"
            for user in "${USERS[@]}"; do
              # Clean whitespace
              clean_user=$(echo "$user" | xargs)
              if [ -n "$clean_user" ]; then
                # Use mapped email if available, otherwise use GitHub username
                if [ -n "${EMAIL_MAP[$clean_user]}" ]; then
                  MENTIONS="$MENTIONS <at>${EMAIL_MAP[$clean_user]}</at>"
                  echo "‚úÖ Mapping $clean_user to ${EMAIL_MAP[$clean_user]}"
                else
                  # Fallback to GitHub username if no mapping found
                  MENTIONS="$MENTIONS @$clean_user"
                  echo "‚ö†Ô∏è No email mapping found for $clean_user, using GitHub username"
                fi
              fi
            done
          fi
          
          # Determine message color and status
          if [ "${{ env.OVERALL_FAILED }}" = "true" ]; then
            COLOR="F85149"  # Red
            STATUS="FAILED ‚ùå"
            SUMMARY="Pipeline failed with the following issues:${{ env.FAILED_DETAILS }}"
          else
            COLOR="28A745"  # Green  
            STATUS="PASSED ‚úÖ"
            SUMMARY="All tests passed successfully!"
          fi
          
          # Create message
          MESSAGE="**Shopware Plugin Test Results**\n\n"
          MESSAGE="${MESSAGE}**Repository:** ${{ github.repository }}\n"
          MESSAGE="${MESSAGE}**Branch:** ${{ github.ref_name }}\n"
          MESSAGE="${MESSAGE}**Commit:** [\`$(echo '${{ github.sha }}' | cut -c1-7)\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\n"
          MESSAGE="${MESSAGE}**Workflow:** [Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n"
          MESSAGE="${MESSAGE}**Status:** $STATUS\n\n"
          MESSAGE="${MESSAGE}$SUMMARY"
          
          if [ -n "$MENTIONS" ]; then
            MESSAGE="${MESSAGE}\n\n$MENTIONS"
          fi
          
          # Save for Teams step
          echo "TEAMS_COLOR=$COLOR" >> $GITHUB_ENV
          echo "TEAMS_MESSAGE<<EOF" >> $GITHUB_ENV
          echo -e "$MESSAGE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Fetch secrets from Vault for testing
        id: fetch_secrets
        if: always()
        uses: hashicorp/vault-action@v2.7.4
        with:
          url: ${{ vars.VAULT_SERVER }}
          method: token
          token: ${{ secrets.CURR_VAULT_TOKEN }}
          secrets: |
            deployment/data/store/sw6 ms_teams_webhook_uri | MS_TEAMS_WEBHOOK_URI

      - name: Send Teams notification with custom content
        if: always()
        run: |
          # Get short SHA
          SHORT_SHA=$(echo '${{ github.sha }}' | cut -c1-7)
          
          # Export the user mapping to environment variable for Python
          export TEAMS_USER_MAPPING="${{ vars.TEAMS_USER_MAPPING }}"
          
          # Determine the author to notify
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, use the PR author
            AUTHOR_USERNAME="${{ github.event.pull_request.user.login }}"
          else
            # For direct pushes, use the commit author
            AUTHOR_USERNAME="${{ github.actor }}"
          fi
          
          echo "üìß Will notify author: $AUTHOR_USERNAME"
          export NOTIFY_USER="$AUTHOR_USERNAME"
          
          # Create custom Teams webhook payload
          cat > teams-payload.json << EOF
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "${{ env.TEAMS_COLOR }}",
            "summary": "Pipeline ${{ env.OVERALL_FAILED == 'true' && 'Failed' || 'Passed' }}",
            "sections": [{
              "activityTitle": "Shopware Plugin Test Results",
              "activitySubtitle": "${{ github.repository }}",
              "activityImage": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "facts": [
                {
                  "name": "Repository:",
                  "value": "${{ github.repository }}"
                },
                {
                  "name": "Branch:",
                  "value": "${{ github.ref_name }}"
                },
                {
                  "name": "Commit:",
                  "value": "[\`${SHORT_SHA}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"
                },
                {
                  "name": "Workflow:",
                  "value": "[Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
                },
                {
                  "name": "Status:",
                  "value": "${{ env.OVERALL_FAILED == 'true' && 'FAILED ‚ùå' || 'PASSED ‚úÖ' }}"
                }
              ],
              "markdown": true
            }],
            "potentialAction": [{
              "@type": "OpenUri",
              "name": "View Workflow Run",
              "targets": [{
                "os": "default",
                "uri": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }]
            }]
          }
          EOF
          
          # Add custom text section with proper line breaks and user mentions
          if [ "${{ env.OVERALL_FAILED }}" = "true" ]; then
            # Create failed message with details and mentions
            python3 << 'PYTHON_EOF'
          import json
          import os
          
          # Parse user mapping from organization variable
          email_map = {}
          user_mapping = os.environ.get('TEAMS_USER_MAPPING', '')
          if user_mapping:
              for pair in user_mapping.split(','):
                  if ':' in pair:
                      github_user, email = pair.split(':', 1)
                      email_map[github_user.strip()] = email.strip()
          
          # Prepare user mentions
          mentions = ""
          notify_user = os.environ.get('NOTIFY_USER', '')
          if notify_user and notify_user in email_map:
              mentions = f"<at>{email_map[notify_user]}</at>"
          elif notify_user:
              mentions = f"@{notify_user}"
          
          # Load the JSON
          with open('teams-payload.json', 'r') as f:
              payload = json.load(f)
          
          # Create detailed text with proper formatting
          details = os.environ.get('FAILED_DETAILS', '').replace('\\n', '\n')
          text_content = f"""
          **Pipeline Failed** ‚ùå
          
          The following issues were found:
          {details}
          
          Please check the workflow run for detailed error messages.
          
          {mentions.strip()}
          """.strip()
          
          # Add text section
          payload['sections'][0]['text'] = text_content
          
          # Save updated JSON
          with open('teams-payload.json', 'w') as f:
              json.dump(payload, f, indent=2)
          PYTHON_EOF
          
          else
            # Create success message
            python3 << 'PYTHON_EOF'
          import json
          import os
          
          # Parse user mapping
          email_map = {}
          user_mapping = os.environ.get('TEAMS_USER_MAPPING', '')
          if user_mapping:
              for pair in user_mapping.split(','):
                  if ':' in pair:
                      github_user, email = pair.split(':', 1)
                      email_map[github_user.strip()] = email.strip()
          
          # Prepare user mentions
          mentions = ""
          notify_user = os.environ.get('NOTIFY_USER', '')
          if notify_user and notify_user in email_map:
              mentions = f"<at>{email_map[notify_user]}</at>"
          
          # Load the JSON
          with open('teams-payload.json', 'r') as f:
              payload = json.load(f)
          
          # Create success text
          text_content = f"""
          **All Tests Passed** ‚úÖ
          
          Great job! All linting and validation checks passed successfully.
          
          {mentions.strip()}
          """.strip()
          
          # Add text section
          payload['sections'][0]['text'] = text_content
          
          # Save updated JSON
          with open('teams-payload.json', 'w') as f:
              json.dump(payload, f, indent=2)
          PYTHON_EOF
          
          fi
          
          # Debug: Show final payload
          echo "=== Final Teams Payload ==="
          cat teams-payload.json
          
          # Send to Teams webhook
          curl -X POST \
            -H "Content-Type: application/json" \
            -d @teams-payload.json \
            "${{ env.MS_TEAMS_WEBHOOK_URI }}"

      - name: Fail job if any tests failed
        if: env.OVERALL_FAILED == 'true'
        run: |
          echo "‚ùå One or more tests failed. Check the summary above for details."
          exit 1