name: 'Shopware 6 Plugin Test'
on:
  workflow_call:
    inputs:
      phpstan-level:
        description: 'PHPStan analysis level'
        required: false
        default: '5'
        type: 'string'
      php-version:
        description: 'PHP version for linting'
        required: false
        default: "8.2"
        type: string
      cli-branch:
        description: 'CLI branch to use'
        required: false
        default: 'linters'
        type: string
    secrets:
      CURR_VAULT_PATH:
        required: true
      CURR_VAULT_TOKEN:
        required: true
      DEPENDENCY_TOKEN:
        required: true

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Checkout CLI tools
        uses: actions/checkout@v4.1.1
        with:
          repository: 'Nimbits/cli'
          ref: ${{ inputs.cli-branch }}
          path: '.github/nimbits-cli'
          token: ${{ secrets.DEPENDENCY_TOKEN }}

      - name: Determine Base Branch
        id: basebranch
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "branch=$(git ls-remote --heads origin master | grep -q master && echo master || echo main)" >> $GITHUB_ENV
          else
            echo "branch=$(git ls-remote --heads origin master | grep -q master && echo master || (git ls-remote --heads origin main | grep -q main && echo main))" >> $GITHUB_ENV
          fi

      - name: Check composer version
        if: github.event_name != 'release'
        run: |
          git fetch origin ${{ env.branch }}:${{ env.branch }}
          BASE_VERSION=$(jq -r '.version' composer.json -c)
          git checkout ${{ env.branch }}
          CURRENT_VERSION=$(jq -r '.version' composer.json -c)
          git checkout -
          if [ "$GITHUB_REF_NAME" != "${{ env.branch }}" ] && [ "$BASE_VERSION" == "$CURRENT_VERSION" ]; then
            echo "Please change the composer version"
            exit 1
          fi

      - name: Check for README changes
        if: github.event_name != 'release'
        run: |
          git fetch origin ${{ env.branch }}
          if ! git diff --name-only HEAD origin/${{ env.branch }} | grep -q "README"; then
            echo "Please add the version to the readme"
            exit 1
          fi

      - name: Configure GitHub token
        run: composer config --global --auth github-oauth.github.com ${{ secrets.DEPENDENCY_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php-version }}

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install project PHP dependencies
        run: composer install

      - name: Install CLI dependencies
        run: |
          cd .github/nimbits-cli
          
          echo "=== Installing CLI dependencies ==="
          echo "Current directory: $(pwd)"
          echo "Files in CLI directory:"
          ls -la
          
          # Install Node.js dependencies for linting tools
          if [ -f "package.json" ]; then
            echo "Installing Node.js dependencies..."
            pnpm install --frozen-lockfile
          else
            echo "No package.json found!"
          fi
          
          # Install PHP dependencies for PHPStan
          if [ -f "composer.json" ]; then
            echo "Installing PHP dependencies..."
            echo "Composer.json content:"
            cat composer.json
            composer install --no-dev --no-interaction --verbose
          else
            echo "No composer.json found!"
          fi
          
          # Verify installations
          echo "=== CLI Tools Verification ==="
          echo "Checking vendor directory:"
          ls -la vendor/ || echo "No vendor directory"
          echo "Checking vendor/bin directory:"
          ls -la vendor/bin/ || echo "No vendor/bin directory"
          echo "Checking node_modules/.bin directory:"
          ls -la node_modules/.bin/ || echo "No node_modules/.bin directory"
          
          # Check specific tools
          if [ -f "vendor/bin/phpstan" ]; then
            echo "‚úì PHPStan found at vendor/bin/phpstan"
            ./vendor/bin/phpstan --version
          else
            echo "‚úó PHPStan missing"
          fi
          
          if [ -f "node_modules/.bin/eslint" ]; then
            echo "‚úì ESLint found"
          else
            echo "‚úó ESLint missing"
          fi
          
          if [ -f "node_modules/.bin/stylelint" ]; then
            echo "‚úì Stylelint found"
          else
            echo "‚úó Stylelint missing"
          fi
          
          cd ../..

      - name: Debug project structure
        run: |
          echo "=== Project Structure Debug ==="
          echo "Current directory: $(pwd)"
          echo "Project files:"
          ls -la
          echo "Source directory:"
          ls -la src/ || echo "No src directory"
          echo "CLI directory exists:"
          ls -la .github/nimbits-cli/ || echo "No CLI directory"

      - name: Run PHPStan
        run: |
          echo "üîç Running PHPStan analysis (level ${{ inputs.phpstan-level }})..."
          
          # Check if PHPStan exists
          if [ ! -f ".github/nimbits-cli/vendor/bin/phpstan" ]; then
            echo "ERROR: PHPStan not found at .github/nimbits-cli/vendor/bin/phpstan"
            echo "Available files in CLI vendor/bin:"
            ls -la .github/nimbits-cli/vendor/bin/ || echo "No vendor/bin directory"
            exit 1
          fi
          
          # Check if config exists
          if [ ! -f ".github/nimbits-cli/configs/phpstan.neon" ]; then
            echo "ERROR: PHPStan config not found"
            echo "Available configs:"
            ls -la .github/nimbits-cli/configs/ || echo "No configs directory"
            exit 1
          fi
          
          # Run PHPStan
          .github/nimbits-cli/vendor/bin/phpstan analyse src \
            --configuration=.github/nimbits-cli/configs/phpstan.neon \
            --level=${{ inputs.phpstan-level }} \
            --memory-limit=512M \
            --no-progress

      - name: Run ESLint
        run: |
          echo "üîç Running ESLint analysis..."
          # Check if JS/Vue files exist
          JS_FILES=$(find . -name "*.js" -o -name "*.vue" | grep -v node_modules | grep -v vendor | grep -v .github | head -1)
          if [ -n "$JS_FILES" ]; then
            cd .github/nimbits-cli
            npx eslint \
              --config=configs/eslint.config.js \
              ../../.
            cd ../..
          else
            echo "No JS/Vue files found to lint"
          fi

      - name: Run Stylelint
        run: |
          echo "üîç Running Stylelint analysis..."
          # Check if CSS/SCSS files exist
          CSS_FILES=$(find . -name "*.css" -o -name "*.scss" -o -name "*.sass" | grep -v node_modules | grep -v vendor | grep -v .github | head -1)
          if [ -n "$CSS_FILES" ]; then
            cd .github/nimbits-cli
            npx stylelint \
              --config=configs/.stylelintrc.json \
              --ignore-path=configs/.stylelintignore \
              "../../**/*.{css,scss,sass}"
            cd ../..
          else
            echo "No CSS/SCSS files found to lint"
          fi

      - name: Fetch secrets from Vault for testing
        id: fetch_secrets
        if: failure()
        uses: hashicorp/vault-action@v2.7.4
        with:
          url: ${{ vars.VAULT_SERVER }}
          method: token
          token: ${{ secrets.CURR_VAULT_TOKEN }}
          secrets: |
            deployment/data/store/sw6 ms_teams_webhook_uri | MS_TEAMS_WEBHOOK_URI

      - name: Notify teams on failure
        if: failure()
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ms-teams-webhook-uri: ${{ env.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: 'Linting tests failed!'
          notification-color: 'F85149'  # Red
          timezone: Europe/Berlin